<!doctype html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="./main.css" rel="stylesheet">
    {#  <script src="../../frontend/node_modules/preline/dist/preline.js"></script>#}
    {#    <script src="https://cdn.jsdelivr.net/npm/preline@2.4.1/dist/preline.min.js"></script>#}
</head>
<body class="p-3 bg-white dark:bg-neutral-900">
<!-- Hero -->
<div class="relative overflow-hidden before:absolute before:top-0 before:start-1/2 before:bg-[url('https://preline.co/assets/svg/examples/polygon-bg-element.svg')] dark:before:bg-[url('https://preline.co/assets/svg/examples-dark/polygon-bg-element.svg')] before:bg-no-repeat before:bg-top before:bg-cover before:size-full before:-z-[1] before:transform before:-translate-x-1/2">
    <div class="max-w-[85rem] mx-auto px-4 sm:px-6 lg:px-8 pt-24 pb-10">
        <!-- Announcement Banner -->
        <div class="flex justify-center">
            <a class="inline-flex items-center gap-x-2 bg-white border border-gray-200 text-sm text-gray-800 p-1 ps-3 rounded-full transition hover:border-gray-300 focus:outline-none focus:border-gray-300 dark:bg-neutral-800 dark:border-neutral-700 dark:text-neutral-200 dark:hover:border-neutral-600 dark:focus:border-neutral-600"
               href="#">
                PRO release - Join to waitlist
                <span class="py-1.5 px-2.5 inline-flex justify-center items-center gap-x-2 rounded-full bg-gray-200 font-semibold text-sm text-gray-600 dark:bg-neutral-700 dark:text-neutral-400">
          <svg class="shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
               fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path
                  d="m9 18 6-6-6-6"/></svg>
        </span>
            </a>
        </div>
        <!-- End Announcement Banner -->

        <!-- Title -->
        <div class="mt-5 max-w-2xl text-center mx-auto">
            <h1 class="block font-bold text-gray-800 text-4xl md:text-5xl lg:text-6xl dark:text-neutral-200">
                Let's Build
                <span class="bg-clip-text bg-gradient-to-tl from-blue-600 to-violet-600 text-transparent">Together</span>
            </h1>
        </div>
        <!-- End Title -->

        <div class="mt-5 max-w-3xl text-center mx-auto">
            <p class="text-lg text-gray-600 dark:text-neutral-400">Preline UI is an open-source set of prebuilt UI
                components, ready-to-use examples and Figma design system based on the utility-first Tailwind CSS
                framework.</p>
        </div>

        <!-- Buttons -->
        <div class="mt-8 gap-3 flex justify-center">
            <a class="inline-flex justify-center items-center gap-x-3 text-center bg-gradient-to-tl from-blue-600 to-violet-600 hover:from-violet-600 hover:to-blue-600 border border-transparent text-white text-sm font-medium rounded-md focus:outline-none focus:from-violet-600 focus:to-blue-600 py-3 px-4"
               href="#">
                Get started
                <svg class="shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                     stroke-linejoin="round">
                    <path d="m9 18 6-6-6-6"/>
                </svg>
            </a>
            <button type="button"
                    class="relative group p-2 ps-3 inline-flex items-center gap-x-2 text-sm font-mono rounded-lg border border-gray-200 bg-white text-gray-800 shadow-sm hover:bg-gray-50 focus:outline-none focus:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-white dark:hover:bg-neutral-800 dark:focus:bg-neutral-800">
                $ npm i preline
                <span class="flex justify-center items-center bg-gray-200 rounded-md size-7 dark:bg-neutral-700 dark:text-neutral-400">
          <svg class="shrink-0 size-4 group-hover:rotate-6 transition" xmlns="http://www.w3.org/2000/svg" width="24"
               height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
               stroke-linejoin="round"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"/><path
                  d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/></svg>
        </span>
            </button>
        </div>
        <!-- End Buttons -->

        <div class="mt-5 flex justify-center items-center gap-x-1 sm:gap-x-3">
            <span class="text-sm text-gray-600 dark:text-neutral-400">Package Manager:</span>
            <span class="text-sm font-bold text-gray-900 dark:text-white">npm</span>
            <svg class="size-5 text-gray-300 dark:text-neutral-600" width="16" height="16" viewBox="0 0 16 16"
                 fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                <path d="M6 13L10 3" stroke="currentColor" stroke-linecap="round"/>
            </svg>
            <a class="inline-flex items-center gap-x-1 text-sm text-blue-600 decoration-2 hover:underline focus:outline-none focus:underline font-medium dark:text-blue-500"
               href="#">
                Installation Guide
                <svg class="shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                     viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                     stroke-linejoin="round">
                    <path d="m9 18 6-6-6-6"/>
                </svg>
            </a>
        </div>
    </div>
</div>
<!-- End Hero -->
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transaction Reports</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
<h1>Transaction Volume Over Time</h1>
<canvas id="transactionVolumeChart"></canvas>

<script>
    fetch('/api/report/volume-over-time')
            .then(response => response.json())
            .then(data => {
                const labels = data.map(d => d.date);
                const counts = data.map(d => d.transaction_count);

                const ctx = document.getElementById('transactionVolumeChart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Transactions',
                            data: counts,
                            borderColor: 'rgba(75, 192, 192, 1)',
                            fill: false
                        }]
                    }
                });
            });
</script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Transaction Reports</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .chart-container {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
            padding: 20px;
        }
        h1, h2 {
            color: #333;
        }
        #loading {
            text-align: center;
            font-size: 18px;
            margin-top: 50px;
        }
    </style>
</head>
<body>
<div class="container">
    <h1>Transaction Reports</h1>
    <div id="loading">Loading data...</div>
    <div class="chart-container">
        <h2>Transactions by Type</h2>
        <canvas id="transactionsByTypeChart"></canvas>
    </div>
    <div class="chart-container">
        <h2>Daily Transaction Volume</h2>
        <canvas id="dailyVolumeChart"></canvas>
    </div>
    <div class="chart-container">
        <h2>Top 5 Senders</h2>
        <canvas id="topSendersChart"></canvas>
    </div>
    <div class="chart-container">
        <h2>Transaction Distribution by Category</h2>
        <canvas id="categoryDistributionChart"></canvas>
    </div>
    <div class="chart-container">
        <h2>Monthly Average Transaction Amount</h2>
        <canvas id="monthlyAverageChart"></canvas>
    </div>
</div>

<script>
    const API_BASE_URL = 'http://localhost:9090/api/reports';

    async function fetchData(endpoint) {
        const response = await fetch(`${API_BASE_URL}${endpoint}`);
        return response.json();
    }

    function getRandomColor() {
        const letters = '0123456789ABCDEF';
        let color = '#';
        for (let i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    async function createTransactionsByTypeChart() {
        const data = await fetchData('/transaction-count-by-type');
        const ctx = document.getElementById('transactionsByTypeChart').getContext('2d');
        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    data: Object.values(data),
                    backgroundColor: Object.keys(data).map(() => getRandomColor())
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Transactions by Type'
                    }
                }
            }
        });
    }

    async function createDailyVolumeChart() {
        const data = await fetchData('/daily-transaction-volume');
        const ctx = document.getElementById('dailyVolumeChart').getContext('2d');
        new Chart(ctx, {
            type: 'line',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    label: 'Daily Volume',
                    data: Object.values(data),
                    borderColor: 'rgb(75, 192, 192)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    async function createTopSendersChart() {
        const data = await fetchData('/top-senders');
        console.log(data, data.map(item => item.key))
        const ctx = document.getElementById('topSendersChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels:data.map(item => Object.keys(item)[0]),
                datasets: [{
                    label: 'Total Amount Sent',
                    data: data.map(item => Object.values(item)[0]),
                    backgroundColor: 'rgba(75, 192, 192, 0.6)'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    async function createCategoryDistributionChart() {
        const data = await fetchData('/transaction-distribution-by-category');
        const ctx = document.getElementById('categoryDistributionChart').getContext('2d');
        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    data: Object.values(data),
                    backgroundColor: Object.keys(data).map(() => getRandomColor())
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Transaction Distribution by Category'
                    }
                }
            }
        });
    }

    async function createMonthlyAverageChart() {
        const data = await fetchData('/monthly-average-transaction-amount');
        const ctx = document.getElementById('monthlyAverageChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: Object.keys(data),
                datasets: [{
                    label: 'Average Transaction Amount',
                    data: Object.values(data),
                    backgroundColor: 'rgba(153, 102, 255, 0.6)'
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    }

    async function initCharts() {
        try {
            await Promise.all([
                createTransactionsByTypeChart(),
                createDailyVolumeChart(),
                createTopSendersChart(),
                createCategoryDistributionChart(),
                createMonthlyAverageChart()
            ]);
            document.getElementById('loading').style.display = 'none';
        } catch (error) {
            console.error('Error loading charts:', error);
            document.getElementById('loading').textContent = 'Error loading data. Please try again later.';
        }
    }

    window.onload = initCharts;
</script>
</body>
</html>